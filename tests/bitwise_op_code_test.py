import random
import unittest

from chip8.emulator.Chip8 import Chip8


class BitwiseOpCodeTest(unittest.TestCase):
    """
    In ArithmeticOpCodeTest We set up the Chip-8 processor and implemented the basic arithmetic
    opcodes. In this section we will implement bitwise opcodes.

    These include AND, OR, XOR, and shifts.

    In this tests we will initialize the registers to the following values : V0 =
    0x64 V1 = 0x27 V2 = 0x12 V3 = 0xAE V4 = 0xFF V5 = 0xB4 V6 = 0x42 VF = 0x25

    All other registers will be 0.

    Additionally we will set a seed to control the random values
    generated by random.* functions.
    """

    def setUp(self):
        self.chip8 = Chip8()
        self.chip8.execute(0x6064)
        self.chip8.execute(0x6127)
        self.chip8.execute(0x6212)
        self.chip8.execute(0x63AE)
        self.chip8.execute(0x64FF)
        self.chip8.execute(0x65B4)
        self.chip8.execute(0x6642)
        self.chip8.execute(0x6F25)

    def tearDown(self):
        pass

    def testAndOpCodes(self):
        """
        8XY2	Set VX to VX & VY
        """
        self.chip8.execute(0x8012)  # v0 = 0x64 & 0x27
        self.assertEquals(36, self.chip8.get_v0())
        self.assertEquals(0x27, self.chip8.get_v1())

        self.chip8.execute(0x8232)  # v2 = 0x12 & 0xAE
        self.assertEquals(2, self.chip8.get_v2())
        self.assertEquals(0xAE, self.chip8.get_v3())

        self.chip8.execute(0x8FE2)  # 0x25 & 0x0
        self.assertEquals(0, self.chip8.get_vf())

    def testOROpCodes(self):
        """
        8XY1	Set VX to VX | VY
        """
        self.chip8.execute(0x8011)  # v0 = 0x64 | 0x27
        self.assertEquals(103, self.chip8.get_v0())
        self.assertEquals(0x27, self.chip8.get_v1())

        self.chip8.execute(0x8231)  # v2 = 0x12 | 0xAE
        self.assertEquals(190, self.chip8.get_v2())
        self.assertEquals(0xAE, self.chip8.get_v3())

        self.chip8.execute(0x8FE1)  # 0x25 | 0x0
        self.assertEquals(0x25, self.chip8.get_vf())

    def testXOROpCodes(self):
        """
        8XY3	Set VX to VX ^ VY
        """
        self.chip8.execute(0x8013)  # v0 = 0x64 ^ 0x27
        self.assertEquals(67, self.chip8.get_v0())
        self.assertEquals(0x27, self.chip8.get_v1())

        self.chip8.execute(0x8233)  # v2 = 0x12 ^ 0xAE
        self.assertEquals(188, self.chip8.get_v2())
        self.assertEquals(0xAE, self.chip8.get_v3())

        self.chip8.execute(0x8FE3)  # 0x25 ^ 0x0
        self.assertEquals(0x25, self.chip8.get_vf())

    def testShiftRight(self):
        """
        8XY6	Shift VX Right one place and store the result in VX. Also store the
        lest significant bit in VF
        """
        self.chip8.execute(0x8016)  # v0 = 0x27 >> 1 xF = 0x1
        self.assertEquals(0x32, self.chip8.get_v0())
        self.assertEquals(0x0, self.chip8.get_vf())

        self.chip8.execute(0x8236)  # v2 = 0xAE >> 1 VF = 0x0
        self.assertEquals(0x09, self.chip8.get_v2())
        self.assertEquals(0x0, self.chip8.get_vf())

        self.chip8.execute(0x8446)  # V4 = 0xFF >> 1 VF = 0x1
        self.assertEquals(127, self.chip8.get_v4())
        self.assertEquals(0x1, self.chip8.get_vf())

    def testShiftLeft(self):
        """
        8XYE	Shift VX left one place and store the result in VX. Also store the
        most significant bit in VF
        """
        self.chip8.execute(0x801E)  # v0 = 0x27 << 1 xF = 0x1
        self.assertEquals(200, self.chip8.get_v0())
        self.assertEquals(0x0, self.chip8.get_vf())

        self.chip8.execute(0x823E)  # v2 = 0xAE << 1 VF = 0x0
        self.assertEquals(36, self.chip8.get_v2())
        self.assertEquals(0x0, self.chip8.get_vf())

        self.chip8.execute(0x844E)  # V4 = 0xFF << 1 VF = 0x1
        self.assertEquals(254, self.chip8.get_v4())
        self.assertEquals(0x1, self.chip8.get_vf())

    def testRandom(self):
        """
        CXNN    Generate a Random number, mask it with NN and store the results in Vx.
        """
        random.seed(42)
        # 163, 6, 70, 57
        self.chip8.execute(0xC1FF)  # V1 = 163 & 0xFF
        self.assertEquals(163, self.chip8.get_v1())

        self.chip8.execute(0xC205)  # v2 = 6 & 0x05
        self.assertEquals(4, self.chip8.get_v2())

        self.chip8.execute(0xC470)  # V4 = 70 & 0x70
        self.assertEquals(64, self.chip8.get_v4())

        self.chip8.execute(0xC757)  # V7 = 57 & 0x57
        self.assertEquals(17, self.chip8.get_v7())
